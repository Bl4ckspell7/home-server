name: dawarich

x-variables:
  dawarich_image: &dawarich_image freikin/dawarich:0.34.1
  app_hosts: &app_hosts localhost,dawarich.bl4ckspell.freeddns.org
  photon_api_host: &photon_api_host photon.lan:2322
  photon_api_use_https: &photon_api_use_https false

services:
  dawarich_redis:
    image: redis:7.4-alpine
    container_name: dawarich_redis
    command: redis-server
    networks:
      default:
    volumes:
      - dawarich_shared:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  dawarich_db:
    image: postgis/postgis:17-3.5-alpine
    shm_size: 1G
    container_name: dawarich_db
    volumes:
      - dawarich_db_data:/var/lib/postgresql/data
      - dawarich_shared:/var/shared
      # - ./postgresql.conf:/etc/postgresql/postgresql.conf # Optional, uncomment if you want to use a custom config
    networks:
      default:
    env_file: .env
    environment:
      POSTGRES_USER: postgres
      # POSTGRES_PASSWORD: password # in .env file
      POSTGRES_DB: dawarich_development
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dawarich_development"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    # command: postgres -c config_file=/etc/postgresql/postgresql.conf # Use custom config, uncomment if you want to use a custom config
  dawarich_app:
    image: *dawarich_image
    container_name: dawarich_app
    volumes:
      - dawarich_public:/var/app/public
      - dawarich_watched:/var/app/tmp/imports/watched
      - dawarich_storage:/var/app/storage
      - dawarich_db_data:/dawarich_db_data
    networks:
      default:
      svr1-network:
        ipv4_address: 172.21.255.244
    dns:
      - 172.21.255.254
    dns_search: # don't append any search domain
      - "."
    ports:
      # Host Port : Container Port
      - 3002:3000
      # - 9394:9394 # Prometheus exporter, uncomment if needed
    stdin_open: true
    tty: true
    entrypoint: web-entrypoint.sh
    command: ["bin/rails", "server", "-p", "3000", "-b", "::"]
    restart: unless-stopped
    env_file: .env
    environment:
      APPLICATION_HOSTS: *app_hosts
      PHOTON_API_HOST: *photon_api_host
      PHOTON_API_USE_HTTPS: *photon_api_use_https
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: 0.0.0.0
      PROMETHEUS_EXPORTER_PORT: 9394
      MIN_MINUTES_SPENT_IN_CITY: 60
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -qO - http://127.0.0.1:3000/api/v1/health | grep -q '\"status\"\\s*:\\s*\"ok\"'",
        ]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
    deploy:
      resources:
        limits:
          cpus: "0.50" # Limit CPU usage to 50% of one core
          memory: "4G" # Limit memory usage to 4GB
  dawarich_sidekiq:
    image: *dawarich_image
    container_name: dawarich_sidekiq
    volumes:
      - dawarich_public:/var/app/public
      - dawarich_watched:/var/app/tmp/imports/watched
      - dawarich_storage:/var/app/storage
    networks:
      default:
      svr1-network:
        ipv4_address: 172.21.255.239
    dns:
      - 172.21.255.254
    dns_search: # don't append any search domain
      - "."
    stdin_open: true
    tty: true
    entrypoint: sidekiq-entrypoint.sh
    command: ["sidekiq"]
    restart: unless-stopped
    env_file: .env
    environment:
      APPLICATION_HOSTS: *app_hosts
      PHOTON_API_HOST: *photon_api_host
      PHOTON_API_USE_HTTPS: *photon_api_use_https
      PROMETHEUS_EXPORTER_ENABLED: "false"
      PROMETHEUS_EXPORTER_HOST: dawarich_app
      PROMETHEUS_EXPORTER_PORT: 9394
      BACKGROUND_PROCESSING_CONCURRENCY: 1
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f sidekiq"]
      interval: 10s
      retries: 30
      start_period: 30s
      timeout: 10s
    depends_on:
      dawarich_db:
        condition: service_healthy
        restart: true
      dawarich_redis:
        condition: service_healthy
        restart: true
      dawarich_app:
        condition: service_healthy
        restart: true

volumes:
  dawarich_db_data:
  dawarich_shared:
  dawarich_public:
  dawarich_watched:
  dawarich_storage:

networks:
  default:
    driver: bridge
  svr1-network:
    external: true
